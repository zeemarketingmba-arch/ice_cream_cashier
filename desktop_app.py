"""
ุจุฑูุงูุฌ ูุงุดูุฑ ุงูุขูุณ ูุฑูู - ุชุทุจูู ุณุทุญ ููุชุจ
ุจุงุณุชุฎุฏุงู Tkinter ู SQLite
"""

import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import sqlite3
from datetime import datetime, date
import json
from pathlib import Path

class IceCreamCashier:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("ูุงุดูุฑ ุงูุขูุณ ูุฑูู ๐ฆ")
        self.root.geometry("1200x800")
        self.root.configure(bg='#f0f0f0')

        # ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช
        self.init_database()

        # ูุชุบูุฑุงุช ุงูุณูุฉ
        self.cart = []
        self.total = 0.0

        # ุฅูุดุงุก ุงููุงุฌูุฉ
        self.create_widgets()
        self.load_products()

    def init_database(self):
        """ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงูุฌุฏุงูู"""
        self.conn = sqlite3.connect('ice_cream_desktop.db')
        cursor = self.conn.cursor()

        # ุฌุฏูู ุงูููุชุฌุงุช
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                price REAL NOT NULL,
                cost REAL NOT NULL,
                description TEXT,
                is_active INTEGER DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # ุฌุฏูู ุงููุจูุนุงุช
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sales (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                total_amount REAL NOT NULL,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # ุฌุฏูู ุนูุงุตุฑ ุงููุจูุนุงุช
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sale_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sale_id INTEGER,
                product_id INTEGER,
                quantity INTEGER NOT NULL,
                price REAL NOT NULL,
                FOREIGN KEY (sale_id) REFERENCES sales (id),
                FOREIGN KEY (product_id) REFERENCES products (id)
            )
        ''')

        # ุฌุฏูู ุงููุตุฑููุงุช
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                description TEXT NOT NULL,
                amount REAL NOT NULL,
                category TEXT NOT NULL,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # ุฅุถุงูุฉ ุจูุงูุงุช ุชุฌุฑูุจูุฉ ุฅุฐุง ูู ุชูู ููุฌูุฏุฉ
        cursor.execute('SELECT COUNT(*) FROM products')
        if cursor.fetchone()[0] == 0:
            sample_products = [
                ('ุขูุณ ูุฑูู ูุงููููุง', 15.0, 8.0, 'ุขูุณ ูุฑูู ูุงููููุง ููุงุณููู'),
                ('ุขูุณ ูุฑูู ุดููููุงุชุฉ', 18.0, 10.0, 'ุขูุณ ูุฑูู ุดููููุงุชุฉ ุบูู'),
                ('ุขูุณ ูุฑูู ูุฑุงููุฉ', 16.0, 9.0, 'ุขูุณ ูุฑูู ูุฑุงููุฉ ุทุจูุนู'),
                ('ุขูุณ ูุฑูู ูุงูุฌู', 20.0, 12.0, 'ุขูุณ ูุฑูู ูุงูุฌู ุงุณุชูุงุฆู'),
                ('ุขูุณ ูุฑูู ููููุฒ', 22.0, 13.0, 'ุขูุณ ูุฑูู ุจูุทุน ุงูููููุฒ'),
                ('ุขูุณ ูุฑูู ูุฑุงููู', 19.0, 11.0, 'ุขูุณ ูุฑูู ูุฑุงููู ุญูู'),
            ]

            cursor.executemany(
                'INSERT INTO products (name, price, cost, description) VALUES (?, ?, ?, ?)',
                sample_products
            )

            # ุฅุถุงูุฉ ูุตุฑููุงุช ุชุฌุฑูุจูุฉ
            sample_expenses = [
                ('ูุงุชูุฑุฉ ููุฑุจุงุก', 450.0, 'ููุฑุจุงุก'),
                ('ููุงุฏ ุฎุงู - ุญููุจ', 800.0, 'ููุงุฏ ุฎุงู'),
                ('ุฑุงุชุจ ููุธู', 3000.0, 'ุฑูุงุชุจ'),
                ('ุตูุงูุฉ ุงูุซูุงุฌุฉ', 150.0, 'ุตูุงูุฉ'),
            ]

            cursor.executemany(
                'INSERT INTO expenses (description, amount, category) VALUES (?, ?, ?)',
                sample_expenses
            )

        self.conn.commit()

    def create_widgets(self):
        """ุฅูุดุงุก ุนูุงุตุฑ ุงููุงุฌูุฉ"""
        # ุฅุทุงุฑ ุงูุนููุงู
        title_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        title_frame.pack(fill='x')
        title_frame.pack_propagate(False)

        title_label = tk.Label(title_frame, text="๐ฆ ูุงุดูุฑ ุงูุขูุณ ูุฑูู",
                              font=('Arial', 24, 'bold'),
                              fg='white', bg='#2c3e50')
        title_label.pack(expand=True)

        # ุฅุทุงุฑ ุงูุฃุฒุฑุงุฑ ุงูุฑุฆูุณูุฉ
        nav_frame = tk.Frame(self.root, bg='#34495e', height=60)
        nav_frame.pack(fill='x')
        nav_frame.pack_propagate(False)

        # ุฃุฒุฑุงุฑ ุงูุชููู
        btn_style = {'font': ('Arial', 12, 'bold'), 'fg': 'white', 'bg': '#3498db',
                    'relief': 'flat', 'padx': 20, 'pady': 10}

        tk.Button(nav_frame, text="๐ ุงููุงุดูุฑ", command=self.show_cashier, **btn_style).pack(side='left', padx=5, pady=10)
        tk.Button(nav_frame, text="๐ฆ ุงูููุชุฌุงุช", command=self.show_products, **btn_style).pack(side='left', padx=5, pady=10)
        tk.Button(nav_frame, text="๐ธ ุงููุตุฑููุงุช", command=self.show_expenses, **btn_style).pack(side='left', padx=5, pady=10)
        tk.Button(nav_frame, text="๐ ุงูุชูุงุฑูุฑ", command=self.show_reports, **btn_style).pack(side='left', padx=5, pady=10)

        # ุงูุฅุทุงุฑ ุงูุฑุฆูุณู
        self.main_frame = tk.Frame(self.root, bg='#f0f0f0')
        self.main_frame.pack(fill='both', expand=True, padx=10, pady=10)

        # ุนุฑุถ ุงููุงุดูุฑ ุงูุชุฑุงุถูุงู
        self.show_cashier()

    def clear_main_frame(self):
        """ูุณุญ ุงูุฅุทุงุฑ ุงูุฑุฆูุณู"""
        for widget in self.main_frame.winfo_children():
            widget.destroy()

    def show_cashier(self):
        """ุนุฑุถ ูุงุฌูุฉ ุงููุงุดูุฑ"""
        self.clear_main_frame()

        # ุฅุทุงุฑ ุงูููุชุฌุงุช (ูุณุงุฑ)
        products_frame = tk.Frame(self.main_frame, bg='white', relief='raised', bd=2)
        products_frame.pack(side='left', fill='both', expand=True, padx=(0, 5))

        tk.Label(products_frame, text="ุงูููุชุฌุงุช ุงููุชุงุญุฉ", font=('Arial', 16, 'bold'),
                bg='white').pack(pady=10)

        # ุฅุทุงุฑ ุดุจูุฉ ุงูููุชุฌุงุช
        self.products_grid_frame = tk.Frame(products_frame, bg='white')
        self.products_grid_frame.pack(fill='both', expand=True, padx=10, pady=10)

        # ุฅุทุงุฑ ุงูุณูุฉ (ูููู)
        cart_frame = tk.Frame(self.main_frame, bg='white', relief='raised', bd=2, width=400)
        cart_frame.pack(side='right', fill='y', padx=(5, 0))
        cart_frame.pack_propagate(False)

        tk.Label(cart_frame, text="ุณูุฉ ุงููุดุชุฑูุงุช", font=('Arial', 16, 'bold'),
                bg='white').pack(pady=10)

        # ูุงุฆูุฉ ุงูุณูุฉ
        self.cart_listbox = tk.Listbox(cart_frame, font=('Arial', 11), height=15)
        self.cart_listbox.pack(fill='both', expand=True, padx=10, pady=10)

        # ุฅุทุงุฑ ุงูุฅุฌูุงูู
        total_frame = tk.Frame(cart_frame, bg='#27ae60')
        total_frame.pack(fill='x', padx=10, pady=5)

        self.total_label = tk.Label(total_frame, text="ุงูุฅุฌูุงูู: 0.00 ุฌ.ู",
                                   font=('Arial', 14, 'bold'),
                                   fg='white', bg='#27ae60')
        self.total_label.pack(pady=10)

        # ุฃุฒุฑุงุฑ ุงูุณูุฉ
        buttons_frame = tk.Frame(cart_frame, bg='white')
        buttons_frame.pack(fill='x', padx=10, pady=10)

        tk.Button(buttons_frame, text="ุฅุชูุงู ุงูุจูุน", font=('Arial', 12, 'bold'),
                 bg='#27ae60', fg='white', command=self.checkout).pack(fill='x', pady=2)

        tk.Button(buttons_frame, text="ูุณุญ ุงูุณูุฉ", font=('Arial', 12, 'bold'),
                 bg='#e74c3c', fg='white', command=self.clear_cart).pack(fill='x', pady=2)

        tk.Button(buttons_frame, text="ุญุฐู ุงูุนูุตุฑ ุงููุญุฏุฏ", font=('Arial', 10),
                 bg='#f39c12', fg='white', command=self.remove_selected_item).pack(fill='x', pady=2)

        # ุชุญููู ุงูููุชุฌุงุช
        self.load_products_grid()

    def load_products(self):
        """ุชุญููู ุงูููุชุฌุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, name, price, cost, description FROM products WHERE is_active = 1')
        self.products = []
        for row in cursor.fetchall():
            self.products.append({
                'id': row[0],
                'name': row[1],
                'price': row[2],
                'cost': row[3],
                'description': row[4]
            })

    def load_products_grid(self):
        """ุชุญููู ุดุจูุฉ ุงูููุชุฌุงุช"""
        # ูุณุญ ุงูููุชุฌุงุช ุงูุญุงููุฉ
        for widget in self.products_grid_frame.winfo_children():
            widget.destroy()

        # ุฅูุดุงุก ุฃุฒุฑุงุฑ ุงูููุชุฌุงุช
        row = 0
        col = 0
        for product in self.products:
            product_btn = tk.Button(
                self.products_grid_frame,
                text=f"{product['name']}\n{product['price']:.2f} ุฌ.ู",
                font=('Arial', 11, 'bold'),
                bg='#3498db',
                fg='white',
                width=15,
                height=4,
                command=lambda p=product: self.add_to_cart(p)
            )
            product_btn.grid(row=row, column=col, padx=5, pady=5, sticky='nsew')

            col += 1
            if col >= 3:  # 3 ููุชุฌุงุช ูู ูู ุตู
                col = 0
                row += 1

        # ุฌุนู ุงูุฃุนูุฏุฉ ูุงุจูุฉ ููุชูุณุน
        for i in range(3):
            self.products_grid_frame.columnconfigure(i, weight=1)

    def add_to_cart(self, product):
        """ุฅุถุงูุฉ ููุชุฌ ููุณูุฉ"""
        # ุงูุจุญุซ ุนู ุงูููุชุฌ ูู ุงูุณูุฉ
        for item in self.cart:
            if item['id'] == product['id']:
                item['quantity'] += 1
                break
        else:
            # ุฅุถุงูุฉ ููุชุฌ ุฌุฏูุฏ
            self.cart.append({
                'id': product['id'],
                'name': product['name'],
                'price': product['price'],
                'quantity': 1
            })

        self.update_cart_display()

    def update_cart_display(self):
        """ุชุญุฏูุซ ุนุฑุถ ุงูุณูุฉ"""
        self.cart_listbox.delete(0, tk.END)
        self.total = 0

        for item in self.cart:
            item_total = item['price'] * item['quantity']
            self.total += item_total

            display_text = f"{item['name']} ร {item['quantity']} = {item_total:.2f} ุฌ.ู"
            self.cart_listbox.insert(tk.END, display_text)

        self.total_label.config(text=f"ุงูุฅุฌูุงูู: {self.total:.2f} ุฌ.ู")

    def remove_selected_item(self):
        """ุญุฐู ุงูุนูุตุฑ ุงููุญุฏุฏ ูู ุงูุณูุฉ"""
        selection = self.cart_listbox.curselection()
        if selection:
            index = selection[0]
            del self.cart[index]
            self.update_cart_display()

    def clear_cart(self):
        """ูุณุญ ุงูุณูุฉ"""
        self.cart = []
        self.update_cart_display()

    def checkout(self):
        """ุฅุชูุงู ุงูุจูุน"""
        if not self.cart:
            messagebox.showwarning("ุชุญุฐูุฑ", "ุงูุณูุฉ ูุงุฑุบุฉ!")
            return

        try:
            cursor = self.conn.cursor()

            # ุฅุถุงูุฉ ุงููุงุชูุฑุฉ
            cursor.execute('INSERT INTO sales (total_amount) VALUES (?)', (self.total,))
            sale_id = cursor.lastrowid

            # ุฅุถุงูุฉ ุนูุงุตุฑ ุงููุงุชูุฑุฉ
            for item in self.cart:
                cursor.execute(
                    'INSERT INTO sale_items (sale_id, product_id, quantity, price) VALUES (?, ?, ?, ?)',
                    (sale_id, item['id'], item['quantity'], item['price'])
                )

            self.conn.commit()

            messagebox.showinfo("ูุฌุญ", f"ุชู ุฅุชูุงู ุงูุจูุน ุจูุฌุงุญ!\nุฑูู ุงููุงุชูุฑุฉ: {sale_id}\nุงูุฅุฌูุงูู: {self.total:.2f} ุฌ.ู")
            self.clear_cart()

        except Exception as e:
            messagebox.showerror("ุฎุทุฃ", f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญูุธ ุงูุจูุน: {str(e)}")

    def show_products(self):
        """ุนุฑุถ ุฅุฏุงุฑุฉ ุงูููุชุฌุงุช"""
        self.clear_main_frame()

        # ุฅุทุงุฑ ุงูุนููุงู ูุงูุฃุฒุฑุงุฑ
        header_frame = tk.Frame(self.main_frame, bg='#f0f0f0')
        header_frame.pack(fill='x', pady=(0, 10))

        tk.Label(header_frame, text="ุฅุฏุงุฑุฉ ุงูููุชุฌุงุช", font=('Arial', 18, 'bold'),
                bg='#f0f0f0').pack(side='left')

        tk.Button(header_frame, text="ุฅุถุงูุฉ ููุชุฌ ุฌุฏูุฏ", font=('Arial', 12, 'bold'),
                 bg='#27ae60', fg='white', command=self.add_product_dialog).pack(side='right')

        # ุฌุฏูู ุงูููุชุฌุงุช
        columns = ('ID', 'ุงูุงุณู', 'ุณุนุฑ ุงูุจูุน', 'ุณุนุฑ ุงูุชูููุฉ', 'ูุงูุด ุงูุฑุจุญ', 'ุงููุตู')
        self.products_tree = ttk.Treeview(self.main_frame, columns=columns, show='headings', height=20)

        # ุชุนููู ุนูุงููู ุงูุฃุนูุฏุฉ
        for col in columns:
            self.products_tree.heading(col, text=col)
            self.products_tree.column(col, width=120)

        # ุดุฑูุท ุงูุชูุฑูุฑ
        scrollbar = ttk.Scrollbar(self.main_frame, orient='vertical', command=self.products_tree.yview)
        self.products_tree.configure(yscrollcommand=scrollbar.set)

        self.products_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')

        # ุฃุฒุฑุงุฑ ุงูุชุญูู
        control_frame = tk.Frame(self.main_frame, bg='#f0f0f0', width=200)
        control_frame.pack(side='right', fill='y', padx=(10, 0))
        control_frame.pack_propagate(False)

        tk.Button(control_frame, text="ุชุนุฏูู ุงูููุชุฌ", font=('Arial', 12),
                 bg='#f39c12', fg='white', command=self.edit_product_dialog).pack(fill='x', pady=5)

        tk.Button(control_frame, text="ุญุฐู ุงูููุชุฌ", font=('Arial', 12),
                 bg='#e74c3c', fg='white', command=self.delete_product).pack(fill='x', pady=5)

        tk.Button(control_frame, text="ุชุญุฏูุซ ุงููุงุฆูุฉ", font=('Arial', 12),
                 bg='#3498db', fg='white', command=self.refresh_products_list).pack(fill='x', pady=5)

        # ุชุญููู ุงูููุชุฌุงุช
        self.refresh_products_list()

    def refresh_products_list(self):
        """ุชุญุฏูุซ ูุงุฆูุฉ ุงูููุชุฌุงุช"""
        # ูุณุญ ุงูุจูุงูุงุช ุงูุญุงููุฉ
        for item in self.products_tree.get_children():
            self.products_tree.delete(item)

        # ุชุญููู ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, name, price, cost, description, is_active FROM products')

        for row in cursor.fetchall():
            product_id, name, price, cost, description, is_active = row

            # ุญุณุงุจ ูุงูุด ุงูุฑุจุญ
            if cost > 0:
                margin = ((price - cost) / cost) * 100
            else:
                margin = 0

            # ุฅุถุงูุฉ ููุฌุฏูู
            status = "ูุดุท" if is_active else "ุบูุฑ ูุดุท"
            self.products_tree.insert('', 'end', values=(
                product_id, name, f"{price:.2f}", f"{cost:.2f}",
                f"{margin:.1f}%", description or "ูุง ููุฌุฏ"
            ))

        # ุชุญุฏูุซ ูุงุฆูุฉ ุงูููุชุฌุงุช ูููุงุดูุฑ
        self.load_products()

    def add_product_dialog(self):
        """ุญูุงุฑ ุฅุถุงูุฉ ููุชุฌ ุฌุฏูุฏ"""
        dialog = tk.Toplevel(self.root)
        dialog.title("ุฅุถุงูุฉ ููุชุฌ ุฌุฏูุฏ")
        dialog.geometry("400x300")
        dialog.configure(bg='white')
        dialog.transient(self.root)
        dialog.grab_set()

        # ุญููู ุงูุฅุฏุฎุงู
        tk.Label(dialog, text="ุงุณู ุงูููุชุฌ:", font=('Arial', 12), bg='white').pack(pady=5)
        name_entry = tk.Entry(dialog, font=('Arial', 12), width=30)
        name_entry.pack(pady=5)

        tk.Label(dialog, text="ุณุนุฑ ุงูุจูุน (ุฌ.ู):", font=('Arial', 12), bg='white').pack(pady=5)
        price_entry = tk.Entry(dialog, font=('Arial', 12), width=30)
        price_entry.pack(pady=5)

        tk.Label(dialog, text="ุณุนุฑ ุงูุชูููุฉ (ุฌ.ู):", font=('Arial', 12), bg='white').pack(pady=5)
        cost_entry = tk.Entry(dialog, font=('Arial', 12), width=30)
        cost_entry.pack(pady=5)

        tk.Label(dialog, text="ุงููุตู:", font=('Arial', 12), bg='white').pack(pady=5)
        desc_entry = tk.Text(dialog, font=('Arial', 12), width=30, height=3)
        desc_entry.pack(pady=5)

        def save_product():
            name = name_entry.get().strip()
            try:
                price = float(price_entry.get())
                cost = float(cost_entry.get())
            except ValueError:
                messagebox.showerror("ุฎุทุฃ", "ูุฑุฌู ุฅุฏุฎุงู ุฃุฑูุงู ุตุญูุญุฉ ููุฃุณุนุงุฑ")
                return

            description = desc_entry.get(1.0, tk.END).strip()

            if not name:
                messagebox.showerror("ุฎุทุฃ", "ูุฑุฌู ุฅุฏุฎุงู ุงุณู ุงูููุชุฌ")
                return

            try:
                cursor = self.conn.cursor()
                cursor.execute(
                    'INSERT INTO products (name, price, cost, description) VALUES (?, ?, ?, ?)',
                    (name, price, cost, description)
                )
                self.conn.commit()
                messagebox.showinfo("ูุฌุญ", "ุชู ุฅุถุงูุฉ ุงูููุชุฌ ุจูุฌุงุญ!")
                dialog.destroy()
                self.refresh_products_list()
            except Exception as e:
                messagebox.showerror("ุฎุทุฃ", f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญูุธ ุงูููุชุฌ: {str(e)}")

        # ุฃุฒุฑุงุฑ ุงูุญูุธ ูุงูุฅูุบุงุก
        buttons_frame = tk.Frame(dialog, bg='white')
        buttons_frame.pack(pady=20)

        tk.Button(buttons_frame, text="ุญูุธ", font=('Arial', 12, 'bold'),
                 bg='#27ae60', fg='white', command=save_product).pack(side='left', padx=10)

        tk.Button(buttons_frame, text="ุฅูุบุงุก", font=('Arial', 12, 'bold'),
                 bg='#e74c3c', fg='white', command=dialog.destroy).pack(side='left', padx=10)

    def edit_product_dialog(self):
        """ุญูุงุฑ ุชุนุฏูู ููุชุฌ"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("ุชุญุฐูุฑ", "ูุฑุฌู ุงุฎุชูุงุฑ ููุชุฌ ููุชุนุฏูู")
            return

        item = self.products_tree.item(selection[0])
        product_id = item['values'][0]

        # ุฌูุจ ุจูุงูุงุช ุงูููุชุฌ
        cursor = self.conn.cursor()
        cursor.execute('SELECT name, price, cost, description FROM products WHERE id = ?', (product_id,))
        product_data = cursor.fetchone()

        if not product_data:
            messagebox.showerror("ุฎุทุฃ", "ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูููุชุฌ")
            return

        dialog = tk.Toplevel(self.root)
        dialog.title("ุชุนุฏูู ุงูููุชุฌ")
        dialog.geometry("400x300")
        dialog.configure(bg='white')
        dialog.transient(self.root)
        dialog.grab_set()

        # ุญููู ุงูุฅุฏุฎุงู ูุน ุงูุจูุงูุงุช ุงูุญุงููุฉ
        tk.Label(dialog, text="ุงุณู ุงูููุชุฌ:", font=('Arial', 12), bg='white').pack(pady=5)
        name_entry = tk.Entry(dialog, font=('Arial', 12), width=30)
        name_entry.pack(pady=5)
        name_entry.insert(0, product_data[0])

        tk.Label(dialog, text="ุณุนุฑ ุงูุจูุน (ุฌ.ู):", font=('Arial', 12), bg='white').pack(pady=5)
        price_entry = tk.Entry(dialog, font=('Arial', 12), width=30)
        price_entry.pack(pady=5)
        price_entry.insert(0, str(product_data[1]))

        tk.Label(dialog, text="ุณุนุฑ ุงูุชูููุฉ (ุฌ.ู):", font=('Arial', 12), bg='white').pack(pady=5)
        cost_entry = tk.Entry(dialog, font=('Arial', 12), width=30)
        cost_entry.pack(pady=5)
        cost_entry.insert(0, str(product_data[2]))

        tk.Label(dialog, text="ุงููุตู:", font=('Arial', 12), bg='white').pack(pady=5)
        desc_entry = tk.Text(dialog, font=('Arial', 12), width=30, height=3)
        desc_entry.pack(pady=5)
        desc_entry.insert(1.0, product_data[3] or "")

        def update_product():
            name = name_entry.get().strip()
            try:
                price = float(price_entry.get())
                cost = float(cost_entry.get())
            except ValueError:
                messagebox.showerror("ุฎุทุฃ", "ูุฑุฌู ุฅุฏุฎุงู ุฃุฑูุงู ุตุญูุญุฉ ููุฃุณุนุงุฑ")
                return

            description = desc_entry.get(1.0, tk.END).strip()

            if not name:
                messagebox.showerror("ุฎุทุฃ", "ูุฑุฌู ุฅุฏุฎุงู ุงุณู ุงูููุชุฌ")
                return

            try:
                cursor = self.conn.cursor()
                cursor.execute(
                    'UPDATE products SET name=?, price=?, cost=?, description=? WHERE id=?',
                    (name, price, cost, description, product_id)
                )
                self.conn.commit()
                messagebox.showinfo("ูุฌุญ", "ุชู ุชุญุฏูุซ ุงูููุชุฌ ุจูุฌุงุญ!")
                dialog.destroy()
                self.refresh_products_list()
            except Exception as e:
                messagebox.showerror("ุฎุทุฃ", f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญุฏูุซ ุงูููุชุฌ: {str(e)}")

        # ุฃุฒุฑุงุฑ ุงูุญูุธ ูุงูุฅูุบุงุก
        buttons_frame = tk.Frame(dialog, bg='white')
        buttons_frame.pack(pady=20)

        tk.Button(buttons_frame, text="ุญูุธ ุงูุชุนุฏููุงุช", font=('Arial', 12, 'bold'),
                 bg='#f39c12', fg='white', command=update_product).pack(side='left', padx=10)

        tk.Button(buttons_frame, text="ุฅูุบุงุก", font=('Arial', 12, 'bold'),
                 bg='#e74c3c', fg='white', command=dialog.destroy).pack(side='left', padx=10)

    def delete_product(self):
        """ุญุฐู ููุชุฌ"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("ุชุญุฐูุฑ", "ูุฑุฌู ุงุฎุชูุงุฑ ููุชุฌ ููุญุฐู")
            return

        item = self.products_tree.item(selection[0])
        product_id = item['values'][0]
        product_name = item['values'][1]

        if messagebox.askyesno("ุชุฃููุฏ ุงูุญุฐู", f"ูู ุฃูุช ูุชุฃูุฏ ูู ุญุฐู ุงูููุชุฌ '{product_name}'ุ"):
            try:
                cursor = self.conn.cursor()
                cursor.execute('UPDATE products SET is_active = 0 WHERE id = ?', (product_id,))
                self.conn.commit()
                messagebox.showinfo("ูุฌุญ", "ุชู ุญุฐู ุงูููุชุฌ ุจูุฌุงุญ!")
                self.refresh_products_list()
            except Exception as e:
                messagebox.showerror("ุฎุทุฃ", f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญุฐู ุงูููุชุฌ: {str(e)}")

    def show_expenses(self):
        """ุนุฑุถ ุฅุฏุงุฑุฉ ุงููุตุฑููุงุช"""
        self.clear_main_frame()

        # ุฅุทุงุฑ ุงูุนููุงู ูุงูุฃุฒุฑุงุฑ
        header_frame = tk.Frame(self.main_frame, bg='#f0f0f0')
        header_frame.pack(fill='x', pady=(0, 10))

        tk.Label(header_frame, text="ุฅุฏุงุฑุฉ ุงููุตุฑููุงุช", font=('Arial', 18, 'bold'),
                bg='#f0f0f0').pack(side='left')

        tk.Button(header_frame, text="ุฅุถุงูุฉ ูุตุฑูู ุฌุฏูุฏ", font=('Arial', 12, 'bold'),
                 bg='#e74c3c', fg='white', command=self.add_expense_dialog).pack(side='right')

        # ุฌุฏูู ุงููุตุฑููุงุช
        columns = ('ID', 'ุงููุตู', 'ุงููุจูุบ', 'ุงููุฆุฉ', 'ุงูุชุงุฑูุฎ')
        self.expenses_tree = ttk.Treeview(self.main_frame, columns=columns, show='headings', height=20)

        # ุชุนููู ุนูุงููู ุงูุฃุนูุฏุฉ
        for col in columns:
            self.expenses_tree.heading(col, text=col)
            self.expenses_tree.column(col, width=150)

        # ุดุฑูุท ุงูุชูุฑูุฑ
        scrollbar2 = ttk.Scrollbar(self.main_frame, orient='vertical', command=self.expenses_tree.yview)
        self.expenses_tree.configure(yscrollcommand=scrollbar2.set)

        self.expenses_tree.pack(side='left', fill='both', expand=True)
        scrollbar2.pack(side='right', fill='y')

        # ุชุญููู ุงููุตุฑููุงุช
        self.refresh_expenses_list()

    def refresh_expenses_list(self):
        """ุชุญุฏูุซ ูุงุฆูุฉ ุงููุตุฑููุงุช"""
        # ูุณุญ ุงูุจูุงูุงุช ุงูุญุงููุฉ
        for item in self.expenses_tree.get_children():
            self.expenses_tree.delete(item)

        # ุชุญููู ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, description, amount, category, date FROM expenses ORDER BY date DESC')

        for row in cursor.fetchall():
            expense_id, description, amount, category, date_str = row

            # ุชูุณูู ุงูุชุงุฑูุฎ
            try:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S')
                formatted_date = date_obj.strftime('%Y-%m-%d %H:%M')
            except:
                formatted_date = date_str

            self.expenses_tree.insert('', 'end', values=(
                expense_id, description, f"{amount:.2f} ุฌ.ู", category, formatted_date
            ))

    def add_expense_dialog(self):
        """ุญูุงุฑ ุฅุถุงูุฉ ูุตุฑูู ุฌุฏูุฏ"""
        dialog = tk.Toplevel(self.root)
        dialog.title("ุฅุถุงูุฉ ูุตุฑูู ุฌุฏูุฏ")
        dialog.geometry("400x350")
        dialog.configure(bg='white')
        dialog.transient(self.root)
        dialog.grab_set()

        # ุญููู ุงูุฅุฏุฎุงู
        tk.Label(dialog, text="ูุตู ุงููุตุฑูู:", font=('Arial', 12), bg='white').pack(pady=5)
        desc_entry = tk.Entry(dialog, font=('Arial', 12), width=30)
        desc_entry.pack(pady=5)

        tk.Label(dialog, text="ุงููุจูุบ (ุฌ.ู):", font=('Arial', 12), bg='white').pack(pady=5)
        amount_entry = tk.Entry(dialog, font=('Arial', 12), width=30)
        amount_entry.pack(pady=5)

        tk.Label(dialog, text="ุงููุฆุฉ:", font=('Arial', 12), bg='white').pack(pady=5)
        category_var = tk.StringVar()
        category_combo = ttk.Combobox(dialog, textvariable=category_var, font=('Arial', 12), width=28)
        category_combo['values'] = ('ููุงุฏ ุฎุงู', 'ุฑูุงุชุจ', 'ุฅูุฌุงุฑ', 'ููุฑุจุงุก', 'ููุงู', 'ุบุงุฒ',
                                   'ุตูุงูุฉ', 'ุชูุธูู', 'ููุงุตูุงุช', 'ุชุณููู', 'ุฃุฏูุงุช', 'ุถุฑุงุฆุจ', 'ุฃุฎุฑู')
        category_combo.pack(pady=5)

        def save_expense():
            description = desc_entry.get().strip()
            try:
                amount = float(amount_entry.get())
            except ValueError:
                messagebox.showerror("ุฎุทุฃ", "ูุฑุฌู ุฅุฏุฎุงู ุฑูู ุตุญูุญ ูููุจูุบ")
                return

            category = category_var.get().strip()

            if not description:
                messagebox.showerror("ุฎุทุฃ", "ูุฑุฌู ุฅุฏุฎุงู ูุตู ุงููุตุฑูู")
                return

            if not category:
                messagebox.showerror("ุฎุทุฃ", "ูุฑุฌู ุงุฎุชูุงุฑ ูุฆุฉ ุงููุตุฑูู")
                return

            try:
                cursor = self.conn.cursor()
                cursor.execute(
                    'INSERT INTO expenses (description, amount, category) VALUES (?, ?, ?)',
                    (description, amount, category)
                )
                self.conn.commit()
                messagebox.showinfo("ูุฌุญ", "ุชู ุฅุถุงูุฉ ุงููุตุฑูู ุจูุฌุงุญ!")
                dialog.destroy()
                self.refresh_expenses_list()
            except Exception as e:
                messagebox.showerror("ุฎุทุฃ", f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญูุธ ุงููุตุฑูู: {str(e)}")

        # ุฃุฒุฑุงุฑ ุงูุญูุธ ูุงูุฅูุบุงุก
        buttons_frame = tk.Frame(dialog, bg='white')
        buttons_frame.pack(pady=20)

        tk.Button(buttons_frame, text="ุญูุธ", font=('Arial', 12, 'bold'),
                 bg='#e74c3c', fg='white', command=save_expense).pack(side='left', padx=10)

        tk.Button(buttons_frame, text="ุฅูุบุงุก", font=('Arial', 12, 'bold'),
                 bg='#95a5a6', fg='white', command=dialog.destroy).pack(side='left', padx=10)

    def show_reports(self):
        """ุนุฑุถ ุงูุชูุงุฑูุฑ"""
        self.clear_main_frame()

        tk.Label(self.main_frame, text="ุงูุชูุงุฑูุฑ ูุงูุฅุญุตุงุฆูุงุช", font=('Arial', 18, 'bold'),
                bg='#f0f0f0').pack(pady=20)

        # ุฅุทุงุฑ ุงูุฅุญุตุงุฆูุงุช
        stats_frame = tk.Frame(self.main_frame, bg='#f0f0f0')
        stats_frame.pack(fill='x', padx=20, pady=10)

        # ุญุณุงุจ ุงูุฅุญุตุงุฆูุงุช
        cursor = self.conn.cursor()

        # ูุจูุนุงุช ุงูููู
        today = date.today().strftime('%Y-%m-%d')
        cursor.execute('SELECT SUM(total_amount) FROM sales WHERE DATE(date) = ?', (today,))
        today_sales = cursor.fetchone()[0] or 0

        # ูุตุฑููุงุช ุงูููู
        cursor.execute('SELECT SUM(amount) FROM expenses WHERE DATE(date) = ?', (today,))
        today_expenses = cursor.fetchone()[0] or 0

        # ุตุงูู ุงูุฑุจุญ ุงูููู
        today_profit = today_sales - today_expenses

        # ูุจูุนุงุช ุงูุดูุฑ
        current_month = date.today().strftime('%Y-%m')
        cursor.execute('SELECT SUM(total_amount) FROM sales WHERE strftime("%Y-%m", date) = ?', (current_month,))
        month_sales = cursor.fetchone()[0] or 0

        # ูุตุฑููุงุช ุงูุดูุฑ
        cursor.execute('SELECT SUM(amount) FROM expenses WHERE strftime("%Y-%m", date) = ?', (current_month,))
        month_expenses = cursor.fetchone()[0] or 0

        # ุตุงูู ุงูุฑุจุญ ุงูุดูุฑ
        month_profit = month_sales - month_expenses

        # ุนุฑุถ ุงูุฅุญุตุงุฆูุงุช
        stats_data = [
            ("ูุจูุนุงุช ุงูููู", f"{today_sales:.2f} ุฌ.ู", '#27ae60'),
            ("ูุตุฑููุงุช ุงูููู", f"{today_expenses:.2f} ุฌ.ู", '#e74c3c'),
            ("ุฑุจุญ ุงูููู", f"{today_profit:.2f} ุฌ.ู", '#27ae60' if today_profit >= 0 else '#e74c3c'),
            ("ูุจูุนุงุช ุงูุดูุฑ", f"{month_sales:.2f} ุฌ.ู", '#3498db'),
            ("ูุตุฑููุงุช ุงูุดูุฑ", f"{month_expenses:.2f} ุฌ.ู", '#e67e22'),
            ("ุฑุจุญ ุงูุดูุฑ", f"{month_profit:.2f} ุฌ.ู", '#27ae60' if month_profit >= 0 else '#e74c3c'),
        ]

        # ุฅูุดุงุก ุจุทุงูุงุช ุงูุฅุญุตุงุฆูุงุช
        row = 0
        col = 0
        for title, value, color in stats_data:
            stat_frame = tk.Frame(stats_frame, bg=color, relief='raised', bd=2)
            stat_frame.grid(row=row, column=col, padx=10, pady=10, sticky='nsew')

            tk.Label(stat_frame, text=title, font=('Arial', 12, 'bold'),
                    fg='white', bg=color).pack(pady=5)
            tk.Label(stat_frame, text=value, font=('Arial', 14, 'bold'),
                    fg='white', bg=color).pack(pady=5)

            col += 1
            if col >= 3:
                col = 0
                row += 1

        # ุฌุนู ุงูุฃุนูุฏุฉ ูุงุจูุฉ ููุชูุณุน
        for i in range(3):
            stats_frame.columnconfigure(i, weight=1)

        # ุฅุทุงุฑ ุงูุชูุตูุงุช
        recommendations_frame = tk.Frame(self.main_frame, bg='white', relief='raised', bd=2)
        recommendations_frame.pack(fill='both', expand=True, padx=20, pady=20)

        tk.Label(recommendations_frame, text="๐ก ุชูุตูุงุช ูุชุญุณูู ุงูุฃุฏุงุก",
                font=('Arial', 16, 'bold'), bg='white').pack(pady=10)

        recommendations = [
            "โข ุฑุงุฌุน ุฃุณุนุงุฑ ุงูููุชุฌุงุช ุจุงูุชุธุงู ูุถูุงู ุงูุฑุจุญูุฉ",
            "โข ุชุงุจุน ุงูููุชุฌุงุช ุงูุฃูุซุฑ ูุจูุนุงู ูุฑูุฒ ุนูููุง",
            "โข ููู ูู ุงููุตุฑููุงุช ุบูุฑ ุงูุถุฑูุฑูุฉ",
            "โข ูุฏู ุนุฑูุถ ุชุฑููุฌูุฉ ูู ุฃููุงุช ุงูุฐุฑูุฉ",
            "โข ุงุญุชูุธ ุจุณุฌู ุฏููู ูุฌููุน ุงููุนุงููุงุช",
            "โข ุญูู ุชูุงุฑูุฑ ุงููุจูุนุงุช ูููู ุงุชุฌุงูุงุช ุงูุนููุงุก"
        ]

        for recommendation in recommendations:
            tk.Label(recommendations_frame, text=recommendation, font=('Arial', 12),
                    bg='white', anchor='w').pack(fill='x', padx=20, pady=2)

        # ุฒุฑ ุทุจุงุนุฉ ุงูุชูุฑูุฑ
        tk.Button(recommendations_frame, text="ุทุจุงุนุฉ ุงูุชูุฑูุฑ", font=('Arial', 12, 'bold'),
                 bg='#9b59b6', fg='white', command=self.print_report).pack(pady=20)

    def print_report(self):
        """ุทุจุงุนุฉ ุงูุชูุฑูุฑ (ูุญุงูุงุฉ)"""
        messagebox.showinfo("ุทุจุงุนุฉ", "ุณูุชู ุชุทููุฑ ูุธููุฉ ุงูุทุจุงุนุฉ ูุฑูุจุงู!")

    def run(self):
        """ุชุดุบูู ุงูุชุทุจูู"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()

    def on_closing(self):
        """ุนูุฏ ุฅุบูุงู ุงูุชุทุจูู"""
        if messagebox.askokcancel("ุฅุบูุงู", "ูู ุชุฑูุฏ ุฅุบูุงู ุงูุจุฑูุงูุฌุ"):
            self.conn.close()
            self.root.destroy()

# ุชุดุบูู ุงูุชุทุจูู
if __name__ == "__main__":
    app = IceCreamCashier()
    app.run()